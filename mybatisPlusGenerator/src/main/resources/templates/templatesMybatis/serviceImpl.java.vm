package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Entity}.qo.${entity}Qo;
import ${package.Entity}.vo.${entity}Vo;
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.apache.commons.lang3.StringUtils;
import java.util.stream.Collectors;
import org.springframework.beans.BeanUtils;
import com.baomidou.mybatisplus.core.metadata.IPage;
import java.util.List;
/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
@Transactional(rollbackFor = Exception.class)
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {

    @Override
    public ${entity}Vo get(Integer id) {
        ${entity} ${table.entityPath} = getById(id);
        return toVo(${table.entityPath});
    }

    @Override
    public List<${entity}Vo> selectList(${entity}Qo ${table.entityPath}Qo) {
        QueryWrapper<${entity}> wrapper = getEntityWrapper(${table.entityPath}Qo);
        List<${entity}> ${table.entityPath}List =  list(wrapper);
        return ${table.entityPath}List.stream().map(this::toVo).collect(Collectors.toList());
    }

    @Override
    public boolean save(${entity}Qo ${table.entityPath}Qo) {
        ${entity} ${table.entityPath} = new ${entity}();
        BeanUtils.copyProperties(${table.entityPath}Qo, ${table.entityPath});
        return save(${table.entityPath});
    }

    @Override
    public boolean updateById(${entity}Qo ${table.entityPath}Qo) {
        ${entity} ${table.entityPath} = new ${entity}();
        BeanUtils.copyProperties(${table.entityPath}Qo, ${table.entityPath});
        return updateById(${table.entityPath});
    }

    @Override
    public void deleteById(Integer id) {
        removeById(id);
    }

    /**
    * 查询角色列表(分页)
    * @param current 当前页
    * @param size      大小
    * @param roleQo
    * @return 查询角色分页列表
    */
    @Override
    public IPage<${entity}> getPages(Long current, Long size, ${entity}Qo ${table.entityPath}Qo) {
        QueryWrapper<${entity}> ${table.entityPath}QueryWrapper = getEntityWrapper(${table.entityPath}Qo);
        Integer count = baseMapper.selectCount(${table.entityPath}QueryWrapper);
        IPage<${entity}> ${table.entityPath}IPage = new Page<>(current, size, count);
        return baseMapper.selectPage(${table.entityPath}IPage, ${table.entityPath}QueryWrapper);
    }

    public ${entity}Vo toVo(${entity} ${table.entityPath}){
        ${entity}Vo ${table.entityPath}Vo = new ${entity}Vo();
        if(${table.entityPath}!=null){
            BeanUtils.copyProperties(${table.entityPath}, ${table.entityPath}Vo);
        }
        return ${table.entityPath}Vo;
    }
    /**
    *  公共查询条件
    * @param ${table.entityPath}Qo
     * @return
     */
    public QueryWrapper<${entity}> getEntityWrapper(${entity}Qo ${table.entityPath}Qo){
        QueryWrapper<${entity}> wrapper = new QueryWrapper<>();
        //条件拼接
    #foreach($field in ${table.fields})
    #if(!${field.keyFlag})
        #if(${field.propertyType.equals("String")})
        if (StringUtils.isNotBlank(${table.entityPath}Qo.get${field.capitalName}())){
                wrapper.eq(${entity}.${field.name.toUpperCase()},${table.entityPath}Qo.get${field.capitalName}());
        }
        #else
         if (${table.entityPath}Qo.get${field.capitalName}()!=null){
                wrapper.eq(${entity}.${field.name.toUpperCase()},${table.entityPath}Qo.get${field.capitalName}());
         }
        #end
   #end
        #end
        return wrapper;
    }
}